{
  "openapi": "3.0.0",
  "info": {
    "title": "RED VENOM Template API",
    "version": "2.0.0",
    "description": "Comprehensive REST API for Template App"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Metadata": {
        "type": "object",
        "properties": {
          "commonId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "sortOrder": {
                  "type": "number"
                },
                "metadata": {
                  "type": "string"
                },
                "metadata.$*": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "description": "valuesItem schema",
              "required": [
                "name"
              ]
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Metadata schema",
        "required": [
          "commonId",
          "name"
        ]
      },
      "FiscalYear": {
        "type": "object",
        "properties": {
          "fiscalYear": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "budgetYear": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "FiscalYear schema",
        "required": [
          "fiscalYear",
          "startDate",
          "endDate"
        ]
      },
      "Ministry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "shortName": {
            "type": "string",
            "maxLength": 20
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "minister": {
            "type": "string",
            "maxLength": 100
          },
          "deputyMinister": {
            "type": "string",
            "maxLength": 100
          },
          "website": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhone": {
            "type": "string"
          },
          "address.street": {
            "type": "string"
          },
          "address.city": {
            "type": "string"
          },
          "address.province": {
            "type": "string"
          },
          "address.postalCode": {
            "type": "string"
          },
          "address.country": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Ministry schema",
        "required": [
          "name",
          "shortName"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "fullName": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30
          },
          "passwordHash": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PUBLIC",
                "APPLICANT",
                "INTERNAL",
                "ADVANCED",
                "ADMINISTRATOR",
                "SUPER_ADMIN"
              ]
            }
          },
          "ministryId": {
            "type": "string",
            "format": "objectid"
          },
          "phone": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "employeeId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isLocked": {
            "type": "boolean"
          },
          "lockUntil": {
            "type": "string",
            "format": "date-time"
          },
          "lockReason": {
            "type": "string"
          },
          "loginAttempts": {
            "type": "number"
          },
          "failedLoginAttempts": {
            "type": "number"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          },
          "loginCount": {
            "type": "number"
          },
          "lastPasswordChange": {
            "type": "string",
            "format": "date-time"
          },
          "passwordHistory": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "type": "string",
            "maxLength": 500
          },
          "avatar": {
            "type": "string"
          },
          "preferences": {
            "type": "string"
          },
          "preferences.$*": {
            "type": "object",
            "additionalProperties": true
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "twoFactorSecret": {
            "type": "string"
          },
          "ssoProvider": {
            "type": "string",
            "enum": [
              "function(props) {\n      const validValues = enumCache.getValues(enumId);\n      return `${props.value} is not a valid value. Valid values are: ${validValues.join(', ')}`;\n    }",
              "function(value) {\n      if (!value) return true; // Allow empty values if not required\n      const validValues = enumCache.getValues(enumId);\n      return validValues.includes(value.toString().toUpperCase());\n    }"
            ]
          },
          "ssoId": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "format": "objectid"
          },
          "updatedBy": {
            "type": "string",
            "format": "objectid"
          },
          "metadata": {
            "type": "string"
          },
          "metadata.$*": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "User schema",
        "required": [
          "firstName",
          "lastName",
          "email",
          "username",
          "passwordHash",
          "passwordSalt"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "session": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "format": "objectid"
          },
          "ipAddress": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "lastAccessed": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Session schema",
        "required": [
          "session",
          "expires"
        ]
      },
      "Application": {
        "type": "object",
        "properties": {
          "legalName": {
            "type": "string",
            "maxLength": 200
          },
          "address.street": {
            "type": "string"
          },
          "address.city": {
            "type": "string"
          },
          "address.postalCode": {
            "type": "string"
          },
          "address.province": {
            "type": "string"
          },
          "address.country": {
            "type": "string",
            "enum": [
              "CA",
              "US",
              "OTHER"
            ]
          },
          "organizationType": {
            "type": "string"
          },
          "taxNumber": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "website": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "SUBMITTED",
              "UNDER_REVIEW",
              "ADDITIONAL_INFO_REQUIRED",
              "APPROVED",
              "REJECTED",
              "WITHDRAWN"
            ]
          },
          "verifiedBy": {
            "type": "string",
            "format": "objectid"
          },
          "verifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Application schema",
        "required": [
          "address.province",
          "address.country",
          "organizationType",
          "language"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "RateLimitError": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticate user with email and password, returns JWT token and user profile",
        "operationId": "loginUser",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "user@REDVENOM.ca"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "User's password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "refreshToken": {
                          "type": "string",
                          "description": "JWT refresh token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid email or password"
                    }
                  }
                }
              }
            }
          },
          "423": {
            "description": "Account locked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Account Locked"
                    },
                    "message": {
                      "type": "string",
                      "example": "Account is temporarily locked due to too many failed login attempts"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "description": "Generate new access token using refresh token",
        "operationId": "refreshToken",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Valid refresh token",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "New JWT access token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "refreshToken": {
                          "type": "string",
                          "description": "New refresh token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "Logout user and invalidate current session",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get user profile",
        "description": "Retrieve current user's profile information",
        "operationId": "getUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user profile",
        "description": "Update current user's profile information",
        "operationId": "updateUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@REDVENOM.ca"
                  },
                  "phone": {
                    "type": "string",
                    "pattern": "^\\\\+?[1-9]\\\\d{1,14}$",
                    "example": "+1-780-555-0123"
                  },
                  "department": {
                    "type": "string",
                    "example": "Treasury Board and Finance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change password",
        "description": "Change current user's password",
        "operationId": "changePassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password",
                    "example": "OldPassword123!"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "New password (minimum 8 characters, must include uppercase, lowercase, number, and special character)",
                    "example": "NewSecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/auth/logout-all": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout from all devices",
        "description": "Invalidate all sessions for the current user",
        "operationId": "logoutAllDevices",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logged out from all devices successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logged out from all devices successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/auth/sessions": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get active sessions",
        "description": "Retrieve all active sessions for the current user",
        "operationId": "getActiveSessions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Active sessions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Session"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User registration",
        "description": "Register a new user account (only available if registration is enabled)",
        "operationId": "registerUser",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "username",
                  "password"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@alberta.ca"
                  },
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "pattern": "^[a-zA-Z0-9_-]+$",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "Password (minimum 8 characters, must include uppercase, lowercase, number, and special character)",
                    "example": "SecurePassword123!"
                  },
                  "department": {
                    "type": "string",
                    "example": "Treasury Board and Finance"
                  },
                  "phone": {
                    "type": "string",
                    "pattern": "^\\\\+?[1-9]\\\\d{1,14}$",
                    "example": "+1-780-555-0123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "message": {
                      "type": "string",
                      "example": "User with this email already exists"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "Google OAuth login",
        "description": "Initiate Google OAuth authentication flow",
        "operationId": "googleAuth",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth"
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "Google OAuth callback",
        "description": "Handle Google OAuth callback and complete authentication",
        "operationId": "googleCallback",
        "security": [],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from Google"
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "State parameter for CSRF protection"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to application with authentication result"
          },
          "400": {
            "description": "OAuth authentication failed"
          }
        }
      }
    },
    "/api/auth/microsoft": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "Microsoft OAuth login",
        "description": "Initiate Microsoft OAuth authentication flow",
        "operationId": "microsoftAuth",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to Microsoft OAuth"
          }
        }
      }
    },
    "/api/auth/microsoft/callback": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "Microsoft OAuth callback",
        "description": "Handle Microsoft OAuth callback and complete authentication",
        "operationId": "microsoftCallback",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to application with authentication result"
          }
        }
      }
    },
    "/api/auth/github": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "GitHub OAuth login",
        "description": "Initiate GitHub OAuth authentication flow",
        "operationId": "githubAuth",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to GitHub OAuth"
          }
        }
      }
    },
    "/api/auth/github/callback": {
      "get": {
        "tags": [
          "Authentication",
          "SSO"
        ],
        "summary": "GitHub OAuth callback",
        "description": "Handle GitHub OAuth callback and complete authentication",
        "operationId": "githubCallback",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to application with authentication result"
          }
        }
      }
    },
    "/api/auth/csrf-token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get CSRF token",
        "description": "Generate and return a CSRF token for the current session",
        "operationId": "getCsrfToken",
        "security": [],
        "responses": {
          "200": {
            "description": "CSRF token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "csrfToken": {
                      "type": "string",
                      "description": "CSRF token for session",
                      "example": "a1b2c3d4e5f6..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Session not available"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "System health check",
        "description": "Check the overall health and status of the application",
        "operationId": "healthCheck",
        "security": [],
        "responses": {
          "200": {
            "description": "System is healthy and operational",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Application is operational"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-03T15:30:00.000Z"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "environment": {
                      "type": "string",
                      "enum": [
                        "development",
                        "staging",
                        "production"
                      ],
                      "example": "development"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "System uptime in seconds",
                      "example": 3600
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "object",
                          "properties": {
                            "connected": {
                              "type": "boolean",
                              "example": true
                            },
                            "responseTime": {
                              "type": "number",
                              "description": "Database response time in milliseconds",
                              "example": 15
                            }
                          }
                        },
                        "memory": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "number",
                              "description": "Used memory in bytes",
                              "example": 67108864
                            },
                            "total": {
                              "type": "number",
                              "description": "Total memory in bytes",
                              "example": 134217728
                            },
                            "percentage": {
                              "type": "number",
                              "description": "Memory usage percentage",
                              "example": 50
                            }
                          }
                        },
                        "cpu": {
                          "type": "object",
                          "properties": {
                            "usage": {
                              "type": "number",
                              "description": "CPU usage percentage",
                              "example": 25.5
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "System is experiencing issues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "System is experiencing issues"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-03T15:30:00.000Z"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "component": {
                            "type": "string",
                            "example": "database"
                          },
                          "status": {
                            "type": "string",
                            "example": "disconnected"
                          },
                          "message": {
                            "type": "string",
                            "example": "Unable to connect to MongoDB"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/health/": {
      "get": {
        "summary": "GET /api/health/",
        "description": "GET /api/health/",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}